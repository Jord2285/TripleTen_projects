# Project Title: Zuber Chicago Ride-Sharing Market Analysis using SQL

## 1. Introduction & Context

**Project Source:** TripleTen SQL Course - Capstone Project
**Scenario:** This project places the user in the role of an Analyst for Zuber, a hypothetical new ride-sharing company entering the Chicago market.
**Objective:** Analyze historical data from existing Chicago taxi companies and weather records to identify market patterns, understand passenger behavior on key routes, and investigate the impact of external factors like weather. The analysis relies entirely on SQL querying.

## 2. Business Problem & Objectives

**Business Need:** As Zuber launches in Chicago, it needs insights into the competitive landscape and factors affecting rides to inform its strategy.
**Project Objectives:**
* Conduct Exploratory Data Analysis (EDA) to understand competitor ride volumes and market share during specific periods.
* Compare the activity levels of major taxi companies versus the rest of the market.
* Prepare data specifically to analyze how weather conditions (rainy vs. non-rainy) potentially affect trip durations on a key route (Loop to O'Hare International Airport) on Saturdays.

## 3. Data Source

The analysis utilizes a relational database containing information on Chicago taxi trips and weather. Key tables include:

* **`neighborhoods`:** Contains neighborhood names and unique identifiers (`neighborhood_id`).
* **`cabs`:** Details about taxi vehicles (`cab_id`) and their operating companies (`company_name`).
* **`trips`:** Records of individual rides, including start/end timestamps (`start_ts`, `end_ts`), duration (`duration_seconds`), distance (`distance_miles`), pickup (`pickup_location_id`), and dropoff (`dropoff_location_id`) neighborhoods.
* **`weather_records`:** Hourly weather data, including timestamp (`ts`), temperature, and a text description (`description`) of conditions (e.g., "light rain").

*Note: `trips` and `weather_records` can be joined using the timestamp fields (`trips.start_ts` and `weather_records.ts`).*

## 4. Key Analytical Tasks (Using SQL)

The project involves executing specific SQL queries to extract required information:

**Step 1: Exploratory Data Analysis**
1.  Calculate the total number of rides (`trips_amount`) per taxi company (`company_name`) for November 15-16, 2017. Sort results by `trips_amount` descending.
2.  Count rides (`trips_amount`) for companies with names containing "Yellow" or "Blue" between November 1-7, 2017. Group by `company_name`.
3.  Aggregate ride counts (`trips_amount`) for November 2017, grouping results into 'Flash Cab', 'Taxi Affiliation Services', and 'Other' categories. Sort results by `trips_amount` descending.

**Step 2: Hypothesis Data Preparation (Weather Impact on Loop to O'Hare Rides)**
1.  Retrieve the `neighborhood_id` values for the 'Loop' and 'O'Hare International Airport' neighborhoods.
2.  Process the `weather_records` table: For each hourly record (`ts`), classify the weather using a `CASE` statement based on the `description` field. Categorize as 'Bad' if description contains "rain" or "storm", otherwise 'Good'. Output fields: `ts`, `weather_conditions`.
3.  Retrieve specific rides from the `trips` table:
    * Started in the Loop (identified `neighborhood_id`).
    * Ended at O'Hare International Airport (identified `neighborhood_id`).
    * Occurred on a Saturday.
4.  Join the selected Saturday rides with the classified hourly weather data (`weather_conditions`) using the ride's `start_ts` and the weather record's `ts`.
5.  Output the duration (`duration_seconds`) and the corresponding `weather_conditions` ('Good' or 'Bad') for each matched ride. Ignore rides where weather data is unavailable for the start hour.

## 5. Tools & Techniques

* **Primary Tool:** SQL (Structured Query Language)
* **Key SQL Concepts Applied:**
    * `SELECT`, `FROM`, `WHERE`, `GROUP BY`, `ORDER BY`
    * `JOIN` (specifically `INNER JOIN` or `LEFT JOIN` with filtering) for combining tables, including joins on timestamp data.
    * Aggregate Functions (`COUNT`, etc.)
    * Filtering Operators (`BETWEEN`, `LIKE`, `IN`)
    * `CASE` Statements for conditional logic/classification.
    * Date/Time Functions (e.g., extracting day of the week).
    * Subqueries or Common Table Expressions (CTEs) may be used for structuring complex queries.

## 6. Deliverables

* A set of well-commented SQL queries that successfully execute all tasks described in Step 1 and Step 2.
* The results (output tables/data) generated by running these queries against the provided database schema.

## 7. Assessment Criteria (Summary)

* Correctness and accuracy of the SQL queries in retrieving the specified data.
* Efficiency and readability of the SQL code.
* Successful application of required SQL concepts (joins, aggregation, filtering, CASE statements, etc.).
* Ability of the queries to provide the necessary data for the defined analytical objectives.

---
